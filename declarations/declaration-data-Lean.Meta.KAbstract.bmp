{"name":"Lean.Meta.KAbstract","instances":[],"imports":["Init","Lean.Data.Occurrences","Lean.HeadIndex","Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/216d2460e0adec8317fdeeb6f2543cb7442564fd/src/Lean/Meta/KAbstract.lean#L24-L46","name":"Lean.Meta.kabstract.visit","line":24,"kind":"def","docLink":"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstract</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occs : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Data/Occurrences.html#Lean.Occurrences\">Lean.Occurrences</a> <a href=\"./Lean/Data/Occurrences.html#Lean.Occurrences.all\">Lean.Occurrences.all</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pHeadIdx : <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">Lean.HeadIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(pNumArgs : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(offset : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/216d2460e0adec8317fdeeb6f2543cb7442564fd/src/Lean/Meta/KAbstract.lean#L17-L47","name":"Lean.Meta.kabstract","line":17,"kind":"def","docLink":"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract","doc":"Abstract occurrences of `p` in `e`. We detect subterms equivalent to `p` using key-matching.\nThat is, only perform `isDefEq` tests when the head symbol of substerm is equivalent to head symbol of `p`.\nBy default, all occurrences are abstracted, but this behavior can be controlled using the `occs` parameter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/KAbstract.html#Lean.Meta.kabstract\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">kabstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(occs : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Data/Occurrences.html#Lean.Occurrences\">Lean.Occurrences</a> <a href=\"./Lean/Data/Occurrences.html#Lean.Occurrences.all\">Lean.Occurrences.all</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}